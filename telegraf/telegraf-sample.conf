[agent]
  interval = '30s'

[[outputs.prometheus_client]]
  listen = ":9126"
  metric_version = 2
  path="/metrics"
  export_timestamp = true

# [[outputs.file]]
#   files = ["stdout"]

[[processors.converter]]
  namepass = ["bgp_stats", "intf_stats", "cpu", "memory"]
  [processors.converter.fields]
    float = ["*"]

[[inputs.gnmi]]
  ## Address and port of the gNMI GRPC server
  addresses = ["leaf1:57400", "leaf2:57400", "leaf3:57400", "spine1:57400", "spine2:57400"]

  ## define credentials
  username = "admin"
  password = "NokiaSrl1!"

  ## gNMI encoding requested (one of: "proto", "json", "json_ietf")
  encoding = "json_ietf"

  ## redial in case of failures after
  redial = "10s"

  enable_tls = true
  insecure_skip_verify = true

  # Define gNMI subscriptions
  [[inputs.gnmi.subscription]]
    # name of the measurement
    name = "cpu"
    path = "/platform/control/cpu[index=all]/total"

    # Subscription mode (one of: "target_defined", "sample", "on_change") and interval
    subscription_mode = "sample"
    sample_interval = "30s"
  
  [[inputs.gnmi.subscription]]
    name = "memory"
    path = "/platform/control/memory"
    subscription_mode = "sample"
    sample_interval = "30s"

  [[inputs.gnmi.subscription]]
    name = "intf_stats"
    path = "/interface[name=ethernet-1/*]/statistics"
    subscription_mode = "sample"
    sample_interval = "30s"

  [[inputs.gnmi.subscription]]
    name = "intf_stats"
    path = "/interface[name=ethernet-1/*]/traffic-rate"
    subscription_mode = "sample"
    sample_interval = "30s"
  
  [[inputs.gnmi.subscription]]
    name = "bgp_stats"
    path = "/network-instance/protocols/bgp/statistics"
    subscription_mode = "sample"
    sample_interval = "30s"

[[inputs.http]]
  name_override = "grpc_stats"
  ## URL of the REST API endpoint
  urls = [
    "https://leaf1/jsonrpc",
    "https://leaf2/jsonrpc",
    "https://leaf3/jsonrpc",
    "https://spine1/jsonrpc",
    "https://spine2/jsonrpc",
  ]
  
  ## HTTP method
  method = "POST"
  
  ## Optional HTTP headers
  headers = {"Content-Type" = "application/json"}
  
  ## Optional HTTP Basic Auth credentials
  username = "admin"
  password = "NokiaSrl1!"
  
  ## Send a JSON body with the command
  body = '''
  {
    "jsonrpc": "2.0",
    "id": 0,
    "method": "get",
    "params": {
        "commands": [
            {
                "path": "/system/grpc-server",
                "datastore": "state"
            }
        ]
    }
}
  '''
  insecure_skip_verify = true

  data_format = "value"
  data_type = "string"
  
  ## How often to run this input
  interval = "10s"

[[processors.starlark]]
  namepass = ["grpc_stats"]
  ## Starlark script to process the JSON data
  source = '''
load("logging.star", "log")
load("json.star", "json")
def apply(metric):
    # get result in json
    results = json.decode(metric.fields.get('value'))
    url = metric.tags.get("url", "")
    source = ""
    if url != "":
      source = url.split("/")[2]
    # log.info(metric.fields.get('value'))
    grpc_info = results["result"][0]["srl_nokia-grpc:grpc-server"]
    
    # grpc_metrics will be used to store our metrics
    grpc_metrics = []
    for grpc_server in grpc_info:
      # metric info for each datapoint
      grpc_metric = Metric("grpc_stats")
      name = grpc_server["name"]
      if "statistics" not in grpc_server:
        grpc_access_reject = 0
        grpc_access_accept = 0
      else:
        grpc_access_reject = grpc_server["statistics"]["access-rejects"]
        grpc_access_accept = grpc_server["statistics"]["access-accepts"]
      grpc_metric.tags["name"] = name
      grpc_metric.tags["source"] = source
      grpc_metric.fields["access_accepted"] = int(grpc_access_accept)
      grpc_metric.fields["access_rejected"] = int(grpc_access_reject)
      grpc_metrics.append(grpc_metric)
    
    return grpc_metrics
'''
